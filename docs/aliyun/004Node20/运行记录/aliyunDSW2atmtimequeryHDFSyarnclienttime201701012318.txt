BLOSUM62	/queryD/D9L10240N4	/Luniref/DL9Line.fasta	256	1	5	11	1	
[Stage 0:>                                                          (0 + 2) / 2]                                                                                [Stage 1:>                                                       (0 + 76) / 256][Stage 1:>                                                       (0 + 76) / 256][Stage 1:>                                                       (1 + 76) / 256][Stage 1:>                                                       (2 + 76) / 256][Stage 1:>                                                       (4 + 76) / 256][Stage 1:=>                                                      (5 + 76) / 256][Stage 1:=>                                                      (7 + 76) / 256][Stage 1:=>                                                      (8 + 76) / 256][Stage 1:=>                                                      (9 + 76) / 256][Stage 1:===>                                                   (16 + 76) / 256][Stage 1:===>                                                   (18 + 76) / 256][Stage 1:====>                                                  (19 + 76) / 256][Stage 1:=====>                                                 (26 + 76) / 256][Stage 1:=====>                                                 (27 + 76) / 256][Stage 1:======>                                                (29 + 76) / 256][Stage 1:=======>                                               (33 + 76) / 256][Stage 1:=======>                                               (35 + 76) / 256][Stage 1:=========>                                             (43 + 76) / 256][Stage 1:==========>                                            (50 + 75) / 256][Stage 1:============>                                          (56 + 75) / 256][Stage 1:============>                                          (59 + 74) / 256][Stage 1:============>                                          (60 + 74) / 256][Stage 1:=============>                                         (63 + 74) / 256][Stage 1:=============>                                         (64 + 74) / 256][Stage 1:==============>                                        (66 + 74) / 256][Stage 1:==============>                                        (68 + 74) / 256][Stage 1:==============>                                        (69 + 73) / 256][Stage 1:===============>                                       (71 + 73) / 256][Stage 1:===============>                                       (72 + 73) / 256][Stage 1:===============>                                       (73 + 73) / 256][Stage 1:===============>                                       (74 + 73) / 256][Stage 1:===============>                                       (74 + 76) / 256][Stage 1:================>                                      (75 + 76) / 256][Stage 1:================>                                      (76 + 76) / 256][Stage 1:================>                                      (77 + 76) / 256][Stage 1:================>                                      (78 + 76) / 256][Stage 1:================>                                      (79 + 76) / 256][Stage 1:=================>                                     (81 + 75) / 256][Stage 1:=================>                                     (82 + 75) / 256][Stage 1:=================>                                     (83 + 75) / 256][Stage 1:==================>                                    (84 + 75) / 256][Stage 1:==================>                                    (85 + 75) / 256][Stage 1:==================>                                    (87 + 75) / 256][Stage 1:===================>                                   (89 + 75) / 256][Stage 1:===================>                                   (91 + 74) / 256][Stage 1:===================>                                   (92 + 74) / 256][Stage 1:===================>                                   (93 + 74) / 256][Stage 1:====================>                                  (95 + 74) / 256][Stage 1:====================>                                  (97 + 74) / 256][Stage 1:=====================>                                 (98 + 74) / 256][Stage 1:=====================>                                (101 + 72) / 256][Stage 1:=====================>                                (102 + 72) / 256][Stage 1:=====================>                                (104 + 71) / 256][Stage 1:======================>                               (107 + 69) / 256][Stage 1:======================>                               (108 + 69) / 256][Stage 1:======================>                               (109 + 68) / 256][Stage 1:=======================>                              (113 + 68) / 256][Stage 1:========================>                             (114 + 68) / 256][Stage 1:========================>                             (115 + 68) / 256][Stage 1:=========================>                            (119 + 64) / 256][Stage 1:=========================>                            (122 + 62) / 256][Stage 1:==========================>                           (124 + 60) / 256][Stage 1:===========================>                          (128 + 58) / 256][Stage 1:===========================>                          (132 + 58) / 256][Stage 1:============================>                         (134 + 57) / 256][Stage 1:============================>                         (135 + 56) / 256][Stage 1:=============================>                        (139 + 54) / 256][Stage 1:=============================>                        (140 + 54) / 256][Stage 1:=============================>                        (141 + 54) / 256][Stage 1:=============================>                        (142 + 53) / 256][Stage 1:==============================>                       (144 + 52) / 256][Stage 1:==============================>                       (145 + 52) / 256][Stage 1:==============================>                       (146 + 51) / 256][Stage 1:===============================>                      (147 + 50) / 256][Stage 1:===============================>                      (148 + 49) / 256][Stage 1:===============================>                      (148 + 76) / 256][Stage 1:===============================>                      (149 + 76) / 256][Stage 1:===============================>                      (150 + 76) / 256][Stage 1:===============================>                      (150 + 77) / 256][Stage 1:===============================>                      (151 + 76) / 256][Stage 1:================================>                     (152 + 76) / 256][Stage 1:================================>                     (153 + 76) / 256][Stage 1:================================>                     (154 + 76) / 256][Stage 1:================================>                     (155 + 76) / 256][Stage 1:================================>                     (156 + 76) / 256][Stage 1:=================================>                    (158 + 76) / 256][Stage 1:=================================>                    (159 + 76) / 256][Stage 1:=================================>                    (161 + 76) / 256][Stage 1:==================================>                   (162 + 76) / 256][Stage 1:==================================>                   (163 + 76) / 256][Stage 1:==================================>                   (164 + 76) / 256][Stage 1:==================================>                   (165 + 76) / 256][Stage 1:===================================>                  (166 + 76) / 256][Stage 1:===================================>                  (167 + 76) / 256][Stage 1:===================================>                  (168 + 76) / 256][Stage 1:===================================>                  (169 + 76) / 256][Stage 1:====================================>                 (172 + 73) / 256][Stage 1:====================================>                 (173 + 72) / 256][Stage 1:====================================>                 (175 + 70) / 256][Stage 1:=====================================>                (176 + 69) / 256][Stage 1:=====================================>                (179 + 66) / 256][Stage 1:======================================>               (184 + 61) / 256][Stage 1:=======================================>              (185 + 60) / 256][Stage 1:=======================================>              (187 + 58) / 256][Stage 1:========================================>             (190 + 55) / 256][Stage 1:========================================>             (192 + 64) / 256][Stage 1:========================================>             (193 + 63) / 256][Stage 1:========================================>             (194 + 62) / 256][Stage 1:=========================================>            (195 + 61) / 256][Stage 1:=========================================>            (196 + 60) / 256][Stage 1:=========================================>            (197 + 59) / 256][Stage 1:=========================================>            (198 + 58) / 256][Stage 1:=========================================>            (199 + 57) / 256][Stage 1:==========================================>           (201 + 55) / 256][Stage 1:==========================================>           (202 + 54) / 256][Stage 1:===========================================>          (204 + 52) / 256][Stage 1:===========================================>          (207 + 49) / 256][Stage 1:============================================>         (209 + 47) / 256][Stage 1:============================================>         (212 + 44) / 256][Stage 1:============================================>         (213 + 43) / 256][Stage 1:=============================================>        (214 + 42) / 256][Stage 1:=============================================>        (217 + 39) / 256][Stage 1:=============================================>        (218 + 38) / 256][Stage 1:==============================================>       (221 + 35) / 256][Stage 1:==============================================>       (222 + 34) / 256][Stage 1:===============================================>      (223 + 33) / 256][Stage 1:===============================================>      (224 + 32) / 256][Stage 1:===============================================>      (225 + 31) / 256][Stage 1:===============================================>      (226 + 30) / 256][Stage 1:===============================================>      (227 + 29) / 256][Stage 1:================================================>     (228 + 28) / 256][Stage 1:================================================>     (229 + 27) / 256][Stage 1:================================================>     (230 + 26) / 256][Stage 1:================================================>     (231 + 25) / 256][Stage 1:================================================>     (232 + 24) / 256][Stage 1:=================================================>    (234 + 22) / 256][Stage 1:=================================================>    (235 + 21) / 256][Stage 1:==================================================>   (238 + 18) / 256][Stage 1:==================================================>   (239 + 17) / 256][Stage 1:===================================================>  (242 + 14) / 256][Stage 1:===================================================>  (243 + 13) / 256][Stage 1:===================================================>  (244 + 12) / 256][Stage 1:===================================================>  (245 + 11) / 256][Stage 1:===================================================>  (246 + 10) / 256][Stage 1:=====================================================> (247 + 9) / 256][Stage 1:=====================================================> (248 + 8) / 256][Stage 1:=====================================================> (250 + 6) / 256][Stage 1:=====================================================> (251 + 5) / 256][Stage 1:======================================================>(252 + 4) / 256][Stage 1:======================================================>(253 + 3) / 256][Stage 1:======================================================>(254 + 2) / 256][Stage 1:======================================================>(255 + 1) / 256]                                                                                [Stage 2:>                                                       (0 + 76) / 256][Stage 2:>                                                       (0 + 76) / 256][Stage 2:>                                                       (1 + 76) / 256][Stage 2:>                                                       (2 + 76) / 256][Stage 2:>                                                       (3 + 76) / 256][Stage 2:>                                                       (4 + 76) / 256][Stage 2:=>                                                      (5 + 76) / 256][Stage 2:=>                                                      (8 + 76) / 256][Stage 2:==>                                                    (10 + 76) / 256][Stage 2:===>                                                   (14 + 76) / 256][Stage 2:===>                                                   (16 + 76) / 256][Stage 2:====>                                                  (20 + 76) / 256][Stage 2:====>                                                  (21 + 76) / 256][Stage 2:====>                                                  (23 + 76) / 256][Stage 2:=====>                                                 (26 + 76) / 256][Stage 2:======>                                                (30 + 76) / 256][Stage 2:=======>                                               (33 + 76) / 256][Stage 2:=======>                                               (34 + 76) / 256][Stage 2:========>                                              (39 + 76) / 256][Stage 2:=========>                                             (45 + 76) / 256][Stage 2:===========>                                           (55 + 76) / 256][Stage 2:============>                                          (56 + 76) / 256][Stage 2:=============>                                         (63 + 76) / 256][Stage 2:=============>                                         (64 + 76) / 256][Stage 2:==============>                                        (66 + 76) / 256][Stage 2:==============>                                        (69 + 76) / 256][Stage 2:===============>                                       (70 + 76) / 256][Stage 2:===============>                                       (71 + 76) / 256][Stage 2:===============>                                       (72 + 76) / 256][Stage 2:===============>                                       (73 + 76) / 256][Stage 2:===============>                                       (74 + 76) / 256][Stage 2:================>                                      (75 + 76) / 256][Stage 2:================>                                      (76 + 76) / 256][Stage 2:================>                                      (76 + 76) / 256][Stage 2:================>                                      (77 + 76) / 256][Stage 2:================>                                      (79 + 76) / 256][Stage 2:=================>                                     (80 + 76) / 256][Stage 2:=================>                                     (81 + 76) / 256][Stage 2:==================>                                    (84 + 76) / 256][Stage 2:==================>                                    (88 + 76) / 256][Stage 2:===================>                                   (92 + 76) / 256][Stage 2:===================>                                   (93 + 76) / 256][Stage 2:====================>                                  (94 + 76) / 256][Stage 2:====================>                                  (95 + 76) / 256][Stage 2:====================>                                  (97 + 76) / 256][Stage 2:=====================>                                 (98 + 76) / 256][Stage 2:=====================>                                (100 + 76) / 256][Stage 2:=====================>                                (102 + 76) / 256][Stage 2:=====================>                                (103 + 76) / 256][Stage 2:=====================>                                (104 + 76) / 256][Stage 2:======================>                               (106 + 76) / 256][Stage 2:======================>                               (107 + 76) / 256][Stage 2:=======================>                              (112 + 76) / 256][Stage 2:=======================>                              (113 + 76) / 256][Stage 2:========================>                             (117 + 76) / 256][Stage 2:=========================>                            (120 + 76) / 256][Stage 2:==========================>                           (124 + 76) / 256][Stage 2:==========================>                           (127 + 76) / 256][Stage 2:===========================>                          (128 + 76) / 256][Stage 2:============================>                         (133 + 76) / 256][Stage 2:============================>                         (136 + 76) / 256][Stage 2:============================>                         (137 + 76) / 256][Stage 2:=============================>                        (138 + 76) / 256][Stage 2:=============================>                        (140 + 76) / 256][Stage 2:=============================>                        (142 + 76) / 256][Stage 2:==============================>                       (144 + 76) / 256][Stage 2:==============================>                       (145 + 76) / 256][Stage 2:===============================>                      (147 + 76) / 256][Stage 2:===============================>                      (148 + 76) / 256][Stage 2:===============================>                      (149 + 76) / 256][Stage 2:===============================>                      (150 + 76) / 256][Stage 2:===============================>                      (151 + 76) / 256][Stage 2:================================>                     (152 + 76) / 256][Stage 2:================================>                     (153 + 76) / 256][Stage 2:================================>                     (155 + 76) / 256][Stage 2:================================>                     (156 + 76) / 256][Stage 2:=================================>                    (157 + 76) / 256][Stage 2:=================================>                    (158 + 75) / 256][Stage 2:=================================>                    (159 + 75) / 256][Stage 2:=================================>                    (160 + 75) / 256][Stage 2:=================================>                    (161 + 74) / 256][Stage 2:==================================>                   (163 + 74) / 256][Stage 2:==================================>                   (165 + 73) / 256][Stage 2:===================================>                  (166 + 73) / 256][Stage 2:===================================>                  (170 + 72) / 256][Stage 2:====================================>                 (171 + 72) / 256][Stage 2:====================================>                 (174 + 72) / 256][Stage 2:=====================================>                (176 + 70) / 256][Stage 2:=====================================>                (177 + 70) / 256][Stage 2:=====================================>                (178 + 69) / 256][Stage 2:=====================================>                (180 + 69) / 256][Stage 2:======================================>               (181 + 68) / 256][Stage 2:======================================>               (184 + 66) / 256][Stage 2:=======================================>              (186 + 66) / 256][Stage 2:=======================================>              (189 + 64) / 256][Stage 2:========================================>             (190 + 63) / 256][Stage 2:========================================>             (192 + 61) / 256][Stage 2:========================================>             (194 + 60) / 256][Stage 2:=========================================>            (197 + 57) / 256][Stage 2:=========================================>            (198 + 56) / 256][Stage 2:==========================================>           (202 + 52) / 256][Stage 2:===========================================>          (207 + 47) / 256][Stage 2:===========================================>          (208 + 46) / 256][Stage 2:============================================>         (210 + 44) / 256][Stage 2:============================================>         (211 + 44) / 256][Stage 2:============================================>         (212 + 43) / 256][Stage 2:============================================>         (213 + 43) / 256][Stage 2:=============================================>        (215 + 41) / 256][Stage 2:=============================================>        (216 + 40) / 256][Stage 2:==============================================>       (219 + 37) / 256][Stage 2:==============================================>       (221 + 35) / 256][Stage 2:===============================================>      (223 + 33) / 256][Stage 2:===============================================>      (224 + 32) / 256][Stage 2:===============================================>      (225 + 31) / 256][Stage 2:===============================================>      (226 + 30) / 256][Stage 2:===============================================>      (227 + 29) / 256][Stage 2:================================================>     (228 + 28) / 256][Stage 2:================================================>     (229 + 27) / 256][Stage 2:================================================>     (230 + 26) / 256][Stage 2:================================================>     (231 + 25) / 256][Stage 2:================================================>     (232 + 24) / 256][Stage 2:=================================================>    (233 + 23) / 256][Stage 2:=================================================>    (234 + 22) / 256][Stage 2:=================================================>    (235 + 21) / 256][Stage 2:=================================================>    (236 + 20) / 256][Stage 2:==================================================>   (238 + 18) / 256][Stage 2:==================================================>   (240 + 16) / 256][Stage 2:===================================================>  (242 + 14) / 256][Stage 2:===================================================>  (243 + 13) / 256][Stage 2:===================================================>  (244 + 12) / 256][Stage 2:===================================================>  (246 + 10) / 256][Stage 2:=====================================================> (247 + 9) / 256][Stage 2:=====================================================> (248 + 8) / 256][Stage 2:=====================================================> (249 + 7) / 256][Stage 2:=====================================================> (250 + 6) / 256][Stage 2:=====================================================> (251 + 5) / 256][Stage 2:======================================================>(252 + 4) / 256][Stage 2:======================================================>(253 + 3) / 256][Stage 2:======================================================>(254 + 2) / 256][Stage 2:======================================================>(255 + 1) / 256]                                                                                [Stage 3:>                                                       (0 + 76) / 256][Stage 3:>                                                       (0 + 76) / 256][Stage 3:>                                                       (1 + 76) / 256][Stage 3:>                                                       (3 + 76) / 256][Stage 3:>                                                       (4 + 76) / 256][Stage 3:=>                                                      (5 + 76) / 256][Stage 3:=>                                                      (8 + 76) / 256][Stage 3:==>                                                    (12 + 76) / 256][Stage 3:===>                                                   (15 + 76) / 256][Stage 3:====>                                                  (21 + 76) / 256][Stage 3:=====>                                                 (25 + 76) / 256][Stage 3:======>                                                (29 + 76) / 256][Stage 3:======>                                                (32 + 76) / 256][Stage 3:========>                                              (38 + 76) / 256][Stage 3:=========>                                             (46 + 76) / 256][Stage 3:==========>                                            (50 + 76) / 256][Stage 3:===========>                                           (53 + 76) / 256][Stage 3:=============>                                         (63 + 76) / 256][Stage 3:=============>                                         (64 + 76) / 256][Stage 3:==============>                                        (66 + 76) / 256][Stage 3:==============>                                        (68 + 76) / 256][Stage 3:==============>                                        (69 + 76) / 256][Stage 3:===============>                                       (70 + 76) / 256][Stage 3:===============>                                       (71 + 76) / 256][Stage 3:===============>                                       (72 + 76) / 256][Stage 3:===============>                                       (73 + 76) / 256][Stage 3:===============>                                       (74 + 76) / 256][Stage 3:================>                                      (75 + 76) / 256][Stage 3:================>                                      (76 + 76) / 256][Stage 3:================>                                      (76 + 76) / 256][Stage 3:================>                                      (77 + 76) / 256][Stage 3:================>                                      (79 + 76) / 256][Stage 3:=================>                                     (80 + 76) / 256][Stage 3:=================>                                     (81 + 76) / 256][Stage 3:=================>                                     (82 + 76) / 256][Stage 3:=================>                                     (83 + 76) / 256][Stage 3:==================>                                    (85 + 76) / 256][Stage 3:==================>                                    (88 + 76) / 256][Stage 3:===================>                                   (89 + 76) / 256][Stage 3:===================>                                   (92 + 76) / 256][Stage 3:====================>                                  (96 + 76) / 256][Stage 3:====================>                                  (97 + 76) / 256][Stage 3:=====================>                                 (99 + 76) / 256][Stage 3:=====================>                                (100 + 76) / 256][Stage 3:=====================>                                (103 + 76) / 256][Stage 3:======================>                               (105 + 76) / 256][Stage 3:======================>                               (106 + 76) / 256][Stage 3:======================>                               (108 + 76) / 256][Stage 3:=======================>                              (111 + 76) / 256][Stage 3:========================>                             (115 + 76) / 256][Stage 3:=========================>                            (119 + 76) / 256][Stage 3:=========================>                            (120 + 76) / 256][Stage 3:=========================>                            (121 + 76) / 256][Stage 3:==========================>                           (125 + 76) / 256][Stage 3:==========================>                           (127 + 77) / 256][Stage 3:===========================>                          (128 + 76) / 256][Stage 3:===========================>                          (129 + 76) / 256][Stage 3:===========================>                          (130 + 76) / 256][Stage 3:===========================>                          (132 + 76) / 256][Stage 3:============================>                         (134 + 76) / 256][Stage 3:============================>                         (135 + 76) / 256][Stage 3:============================>                         (136 + 76) / 256][Stage 3:============================>                         (137 + 76) / 256][Stage 3:=============================>                        (138 + 76) / 256][Stage 3:=============================>                        (140 + 76) / 256][Stage 3:=============================>                        (141 + 76) / 256][Stage 3:=============================>                        (142 + 76) / 256][Stage 3:==============================>                       (143 + 76) / 256][Stage 3:==============================>                       (144 + 76) / 256][Stage 3:==============================>                       (145 + 76) / 256][Stage 3:==============================>                       (146 + 76) / 256][Stage 3:===============================>                      (147 + 76) / 256][Stage 3:===============================>                      (148 + 76) / 256][Stage 3:===============================>                      (149 + 76) / 256][Stage 3:===============================>                      (150 + 76) / 256][Stage 3:===============================>                      (151 + 76) / 256][Stage 3:================================>                     (152 + 76) / 256][Stage 3:================================>                     (153 + 76) / 256][Stage 3:================================>                     (154 + 76) / 256][Stage 3:================================>                     (155 + 76) / 256][Stage 3:================================>                     (156 + 76) / 256][Stage 3:=================================>                    (157 + 76) / 256][Stage 3:=================================>                    (160 + 76) / 256][Stage 3:=================================>                    (161 + 76) / 256][Stage 3:==================================>                   (164 + 75) / 256][Stage 3:==================================>                   (165 + 75) / 256][Stage 3:===================================>                  (166 + 75) / 256][Stage 3:===================================>                  (168 + 73) / 256][Stage 3:====================================>                 (171 + 71) / 256][Stage 3:====================================>                 (173 + 70) / 256][Stage 3:====================================>                 (174 + 69) / 256][Stage 3:====================================>                 (175 + 69) / 256][Stage 3:=====================================>                (176 + 69) / 256][Stage 3:=====================================>                (179 + 68) / 256][Stage 3:=====================================>                (180 + 67) / 256][Stage 3:======================================>               (181 + 66) / 256][Stage 3:======================================>               (182 + 65) / 256][Stage 3:=======================================>              (185 + 63) / 256][Stage 3:=======================================>              (187 + 62) / 256][Stage 3:=======================================>              (188 + 62) / 256][Stage 3:========================================>             (190 + 60) / 256][Stage 3:========================================>             (191 + 60) / 256][Stage 3:========================================>             (193 + 58) / 256][Stage 3:=========================================>            (196 + 55) / 256][Stage 3:=========================================>            (198 + 54) / 256][Stage 3:==========================================>           (200 + 52) / 256][Stage 3:==========================================>           (201 + 52) / 256][Stage 3:==========================================>           (202 + 51) / 256][Stage 3:===========================================>          (205 + 49) / 256][Stage 3:===========================================>          (208 + 47) / 256][Stage 3:============================================>         (209 + 46) / 256][Stage 3:============================================>         (211 + 44) / 256][Stage 3:=============================================>        (214 + 42) / 256][Stage 3:=============================================>        (216 + 40) / 256][Stage 3:=============================================>        (217 + 39) / 256][Stage 3:=============================================>        (218 + 38) / 256][Stage 3:==============================================>       (220 + 36) / 256][Stage 3:==============================================>       (221 + 35) / 256][Stage 3:==============================================>       (222 + 34) / 256][Stage 3:===============================================>      (223 + 33) / 256][Stage 3:===============================================>      (224 + 32) / 256][Stage 3:===============================================>      (225 + 31) / 256][Stage 3:===============================================>      (226 + 30) / 256][Stage 3:===============================================>      (227 + 29) / 256][Stage 3:================================================>     (228 + 28) / 256][Stage 3:================================================>     (230 + 26) / 256][Stage 3:================================================>     (231 + 25) / 256][Stage 3:================================================>     (232 + 24) / 256][Stage 3:=================================================>    (233 + 23) / 256][Stage 3:=================================================>    (234 + 22) / 256][Stage 3:=================================================>    (235 + 21) / 256][Stage 3:=================================================>    (236 + 20) / 256][Stage 3:=================================================>    (237 + 19) / 256][Stage 3:==================================================>   (240 + 16) / 256][Stage 3:==================================================>   (241 + 15) / 256][Stage 3:===================================================>  (242 + 14) / 256][Stage 3:===================================================>  (243 + 13) / 256][Stage 3:===================================================>  (244 + 12) / 256][Stage 3:===================================================>  (245 + 11) / 256][Stage 3:===================================================>  (246 + 10) / 256][Stage 3:=====================================================> (247 + 9) / 256][Stage 3:=====================================================> (248 + 8) / 256][Stage 3:=====================================================> (250 + 6) / 256][Stage 3:=====================================================> (251 + 5) / 256][Stage 3:======================================================>(252 + 4) / 256][Stage 3:======================================================>(253 + 3) / 256][Stage 3:======================================================>(254 + 2) / 256][Stage 3:======================================================>(255 + 1) / 256]                                                                                [Stage 4:>                                                        (0 + 0) / 256][Stage 4:>                                                       (0 + 76) / 256][Stage 4:>                                                       (0 + 76) / 256][Stage 4:>                                                       (1 + 76) / 256][Stage 4:>                                                       (2 + 76) / 256][Stage 4:>                                                       (3 + 76) / 256][Stage 4:>                                                       (4 + 76) / 256][Stage 4:=>                                                      (5 + 76) / 256][Stage 4:=>                                                      (6 + 76) / 256][Stage 4:=>                                                      (9 + 76) / 256][Stage 4:==>                                                    (11 + 76) / 256][Stage 4:===>                                                   (15 + 76) / 256][Stage 4:===>                                                   (16 + 76) / 256][Stage 4:====>                                                  (20 + 76) / 256][Stage 4:====>                                                  (21 + 76) / 256][Stage 4:=====>                                                 (24 + 76) / 256][Stage 4:======>                                                (29 + 76) / 256][Stage 4:=======>                                               (34 + 76) / 256][Stage 4:========>                                              (41 + 77) / 256][Stage 4:==========>                                            (47 + 76) / 256][Stage 4:==========>                                            (51 + 76) / 256][Stage 4:===========>                                           (53 + 76) / 256][Stage 4:============>                                          (60 + 76) / 256][Stage 4:=============>                                         (65 + 76) / 256][Stage 4:==============>                                        (66 + 76) / 256][Stage 4:==============>                                        (68 + 76) / 256][Stage 4:==============>                                        (69 + 76) / 256][Stage 4:===============>                                       (70 + 76) / 256][Stage 4:===============>                                       (72 + 76) / 256][Stage 4:===============>                                       (73 + 76) / 256][Stage 4:===============>                                       (74 + 76) / 256][Stage 4:================>                                      (75 + 76) / 256][Stage 4:================>                                      (76 + 76) / 256][Stage 4:================>                                      (76 + 76) / 256][Stage 4:================>                                      (77 + 76) / 256][Stage 4:================>                                      (78 + 76) / 256][Stage 4:================>                                      (79 + 76) / 256][Stage 4:=================>                                     (80 + 76) / 256][Stage 4:=================>                                     (81 + 76) / 256][Stage 4:=================>                                     (82 + 76) / 256][Stage 4:=================>                                     (83 + 76) / 256][Stage 4:==================>                                    (85 + 76) / 256][Stage 4:==================>                                    (86 + 76) / 256][Stage 4:==================>                                    (87 + 76) / 256][Stage 4:==================>                                    (88 + 76) / 256][Stage 4:===================>                                   (89 + 76) / 256][Stage 4:===================>                                   (90 + 76) / 256][Stage 4:===================>                                   (91 + 76) / 256][Stage 4:===================>                                   (92 + 76) / 256][Stage 4:===================>                                   (93 + 76) / 256][Stage 4:====================>                                  (94 + 76) / 256][Stage 4:====================>                                  (97 + 76) / 256][Stage 4:=====================>                                 (98 + 76) / 256][Stage 4:=====================>                                 (99 + 76) / 256][Stage 4:=====================>                                (102 + 76) / 256][Stage 4:======================>                               (105 + 76) / 256][Stage 4:======================>                               (106 + 76) / 256][Stage 4:=======================>                              (111 + 76) / 256][Stage 4:========================>                             (114 + 76) / 256][Stage 4:========================>                             (115 + 76) / 256][Stage 4:=========================>                            (119 + 76) / 256][Stage 4:=========================>                            (121 + 76) / 256][Stage 4:==========================>                           (125 + 76) / 256][Stage 4:==========================>                           (126 + 76) / 256][Stage 4:==========================>                           (127 + 76) / 256][Stage 4:===========================>                          (129 + 76) / 256][Stage 4:===========================>                          (130 + 76) / 256][Stage 4:===========================>                          (131 + 76) / 256][Stage 4:===========================>                          (132 + 76) / 256][Stage 4:============================>                         (133 + 76) / 256][Stage 4:============================>                         (134 + 76) / 256][Stage 4:============================>                         (135 + 76) / 256][Stage 4:============================>                         (137 + 76) / 256][Stage 4:=============================>                        (138 + 76) / 256][Stage 4:=============================>                        (139 + 76) / 256][Stage 4:=============================>                        (140 + 76) / 256][Stage 4:=============================>                        (141 + 76) / 256][Stage 4:=============================>                        (142 + 76) / 256][Stage 4:==============================>                       (143 + 76) / 256][Stage 4:==============================>                       (145 + 76) / 256][Stage 4:==============================>                       (146 + 76) / 256][Stage 4:===============================>                      (147 + 76) / 256][Stage 4:===============================>                      (148 + 76) / 256][Stage 4:===============================>                      (149 + 76) / 256][Stage 4:===============================>                      (150 + 76) / 256][Stage 4:===============================>                      (151 + 76) / 256][Stage 4:================================>                     (152 + 76) / 256][Stage 4:================================>                     (153 + 76) / 256][Stage 4:================================>                     (154 + 76) / 256][Stage 4:================================>                     (155 + 76) / 256][Stage 4:=================================>                    (157 + 76) / 256][Stage 4:=================================>                    (158 + 76) / 256][Stage 4:=================================>                    (159 + 76) / 256][Stage 4:=================================>                    (161 + 76) / 256][Stage 4:==================================>                   (162 + 76) / 256][Stage 4:==================================>                   (163 + 76) / 256][Stage 4:==================================>                   (164 + 75) / 256][Stage 4:==================================>                   (165 + 75) / 256][Stage 4:===================================>                  (166 + 75) / 256][Stage 4:===================================>                  (167 + 75) / 256][Stage 4:===================================>                  (168 + 74) / 256][Stage 4:===================================>                  (169 + 73) / 256][Stage 4:===================================>                  (170 + 73) / 256][Stage 4:====================================>                 (171 + 72) / 256][Stage 4:====================================>                 (172 + 72) / 256][Stage 4:====================================>                 (173 + 72) / 256][Stage 4:====================================>                 (174 + 71) / 256][Stage 4:====================================>                 (175 + 70) / 256][Stage 4:=====================================>                (177 + 69) / 256][Stage 4:=====================================>                (178 + 69) / 256][Stage 4:=====================================>                (180 + 67) / 256][Stage 4:======================================>               (181 + 66) / 256][Stage 4:======================================>               (183 + 64) / 256][Stage 4:=======================================>              (185 + 62) / 256][Stage 4:=======================================>              (187 + 61) / 256][Stage 4:=======================================>              (188 + 60) / 256][Stage 4:=======================================>              (189 + 59) / 256][Stage 4:========================================>             (194 + 56) / 256][Stage 4:=========================================>            (196 + 55) / 256][Stage 4:=========================================>            (198 + 54) / 256][Stage 4:==========================================>           (200 + 52) / 256][Stage 4:==========================================>           (201 + 51) / 256][Stage 4:==========================================>           (203 + 49) / 256][Stage 4:===========================================>          (206 + 48) / 256][Stage 4:===========================================>          (207 + 47) / 256][Stage 4:===========================================>          (208 + 46) / 256][Stage 4:============================================>         (210 + 45) / 256][Stage 4:============================================>         (211 + 44) / 256][Stage 4:============================================>         (213 + 42) / 256][Stage 4:=============================================>        (214 + 41) / 256][Stage 4:=============================================>        (215 + 40) / 256][Stage 4:=============================================>        (216 + 39) / 256][Stage 4:=============================================>        (217 + 39) / 256][Stage 4:=============================================>        (218 + 38) / 256][Stage 4:==============================================>       (219 + 37) / 256][Stage 4:==============================================>       (220 + 36) / 256][Stage 4:==============================================>       (221 + 35) / 256][Stage 4:===============================================>      (223 + 33) / 256][Stage 4:===============================================>      (224 + 32) / 256][Stage 4:===============================================>      (225 + 31) / 256][Stage 4:===============================================>      (226 + 30) / 256][Stage 4:===============================================>      (227 + 29) / 256][Stage 4:================================================>     (228 + 28) / 256][Stage 4:================================================>     (229 + 27) / 256][Stage 4:================================================>     (230 + 26) / 256][Stage 4:================================================>     (232 + 24) / 256][Stage 4:=================================================>    (233 + 23) / 256][Stage 4:=================================================>    (234 + 22) / 256][Stage 4:=================================================>    (235 + 21) / 256][Stage 4:=================================================>    (236 + 20) / 256][Stage 4:=================================================>    (237 + 19) / 256][Stage 4:==================================================>   (238 + 18) / 256][Stage 4:==================================================>   (240 + 16) / 256][Stage 4:==================================================>   (241 + 15) / 256][Stage 4:===================================================>  (242 + 14) / 256][Stage 4:===================================================>  (243 + 13) / 256][Stage 4:===================================================>  (244 + 12) / 256][Stage 4:===================================================>  (245 + 11) / 256][Stage 4:===================================================>  (246 + 10) / 256][Stage 4:=====================================================> (248 + 8) / 256][Stage 4:=====================================================> (249 + 7) / 256][Stage 4:=====================================================> (250 + 6) / 256][Stage 4:=====================================================> (251 + 5) / 256][Stage 4:======================================================>(252 + 4) / 256][Stage 4:======================================================>(253 + 3) / 256][Stage 4:======================================================>(254 + 2) / 256][Stage 4:======================================================>(255 + 1) / 256]                                                                                topK:5 Query:UniRef100_K1PNP9
AlignmentRecord(refName=UniRef100_K1PNP9, refSequence.take(100)=MFSCFRKKKKKLKGKPPLASEAVVSVKEPQRQATQQISDVVVSGQEDLSAKEALLLWSRRTVEGYPGVKVKNFSSSWRDGRAFLSIIHRHRPDLVDFRKV, cigar=10247M, score1=53844, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_V4A6K8, refSequence.take(100)=MLKYLTCGGCGCGRKKKKPKNLNGDNAPYAPAEKPLISSTVVPGQPQDISARDALLYWSRRTTEGYPGIKITDFSKSWRDGKAFLAIIHRNRPDLVDFRK, cigar=6M2D5M1D5M5I5M6I10M1D812M9D30M2D143M2D189M2I82M8I7M3I35M1D9M3D505M1I48M1D12M5I15M1D2M4I8M1D62M1I23M1D232M4D196M3D7M1D15M2I19M21I9M6I3M15I5M39I2M29I3M6I154M1I41M3I5M1D7M3I13M2I3M4I10M6I24M1D12M5I47M7I9M8I13M5I46M1I35M3I27M6I3M5I20M32I2M1D7M4I11M18I108M1I5M12D36M5D18M3D53M4I12M5D78M1I30M4I28M3D14M17D5M2D30M11D9M15D5M14D241M6I49M8D9M10D2M1D7M11D29M5D60M2I67M2D13M1I60M1D151M8D85M1D18M24I7M11I14M1I4M4I12M3I41M1D26M1D24M2D8M2I10M3I37M1I72M1D3M4D7M11D7M15D14M39D6M26D8M13D4M7D5M2D5M35D7M16D3M89D52M9D10M3D26M1I18M5D22M57D31M27D10M1I5M25D3M12D17M12D22M16D21M2I189M3D158M1D177M22I13M25I8M11I28M1I13M6D54M4I9M24I9M5I2M3I7M7I32M27I7M14I9M2I5M22I13M7I20M14I4M9I21M1D89M5D12M4I7M1D12M1D131M1I46M53D5M20D10M19D5M27D9M106D7M20D7M2D9M5D7M2D4M18D16M36D6M21D13M13D22M37D13M5D5M63D8M44D5M4D658M1I30M1D8M5I484M1D10M1I175M1D1200M1D499M2D151M1D8M1D9M11D7M4D4M24D138M2D81M20I35M1D7M3I27M4I14M1I5M4D29M1I17M1D41M, score1=18535, score2=8384, ref_begin1=3, ref_end1=10815, read_begin1=3, read_end1=10217, ref_end2=5684)
AlignmentRecord(refName=UniRef100_A0A0L8I8F9, refSequence.take(100)=MRFHKMQNVQISLDFLRYKGIKLVNIRADEIVDGNPKLTLGLIWTIILHFQISDVVVPGQPENLTAKEALLLWSRRTTEGYPGIKVTDFSTSWRDGKAFL, cigar=10M1D85M14I5M2I5M2D403M1D298M9D20M3D9M1I36M1I104M2I10M5D133M4I105M5I22M1I8M1I24M4I157M1D286M1I30M1I92M5D17M1D10M6D43M2I119M1D2M2I28M1D331M9D10M6I13M1D32M9I12M11I76M5I42M1I163M4D33M26D11M35D15M58D9M7D11M30D7M25D4M14D5M38D9M41D22M4D8M18D3M42D20M32D10M34D4M1D14M6D3M2D6M2D47M2D46M1D3M10I18M15I12M9I26M30I97M11D21M4I34M15D7M4D7M7D11M27D49M2D82M1I19M3D12M1D9M1D8M12D40M2D9M24D21M14D13M1D231M1D10M2I60M9I2M11I6M22I58M2I81M2I50M1D12M2I133M4D91M1D33M2I8M1I6M3D14M1D7M3I7M1I7M17I31M1D20M2D54M2I37M1I70M16D3M33D11M7D6M3I20M36D5M13D52M31D45M5I14M7I31M3D12M13D27M6D12M15D7M7D11M9D9M5D24M1I88M1I38M1I23M1I8M1I30M3D63M1I71M2I22M1I106M1I15M1I71M1D7M1D28M7D6M10D23M17D151M4D3M20D17M2D18M1D10M2I9M1D4M2D10M10D11M5D24M50D9M2D11M35D9M37D12M2D6M32D10M6D15M4D6M1D14M26D8M3D7M6D4M50D4M28D5M6D5M14D3M128D9M5D60M5D14M6D7M6D149M1I53M1D10M8D5M7D2M1D17M4D4M1D14M14D12M3D21M13D13M2D8M11D22M10D13M2I147M2I510M1I8M3I20M2I7M1D3M1D460M1D221M1I11M4D120M3I11M3D284M1I762M1D653M1I9M4I11M1I214M20I40M4D20M2I9M3I17M2I9M3D10M3D13M2I55M6I18M, score1=16995, score2=7811, ref_begin1=35, ref_end1=11382, read_begin1=35, read_end1=10239, ref_end2=6245)
AlignmentRecord(refName=UniRef100_A0A0L8I9U6, refSequence.take(100)=MLLNRNFPSTLIEMRSLLADFSRFRLEEVPPRLELKQKLFRLFDEIQALSNDTLPLGLEDELYPKNVERLFSRFLLAQQEKDMAIQSELVRLERLQRLAE, cigar=365M1D298M9D20M3D9M1I36M1I104M2I10M5D133M4I105M5I22M1I8M1I24M4I157M1D286M1I30M1I92M5D17M1D10M6D43M2I119M1D2M2I28M1D331M9D10M6I13M1D32M9I12M11I76M5I42M1I163M4D17M4I22M6I4M4I6M3I6M6I11M1D9M3I25M1I43M2I5M4D19M4I9M2I12M38I16M19I6M7I12M1D18M4I21M5I33M7I20M4I5M1D2M16I29M6I18M12I10M11I9M12I5M2I4M11I4M6I16M1I10M10I17M13I4M3I16M11I6M20I4M3I2M24I26M2I25M12I12M2I13M2D30M9I53M3D3M7I38M3D23M3D8M1D5M1I59M19I28M1D21M3I7M4I3M13I15M16I43M6D26M2I11M12I8M5I9M2I6M5I17M1I54M4I3M6I2M8I37M22I24M1D7M25I16M1I9M42I5M6I10M43I14M3I12M10I3M10I41M1D10M12I5M12I12M9I4M14I4M57I41M22I22M9I39M3D10M4D12M3I19M2I7M11I6M18I21M8I9M5I5M16I11M14I20M2I37M3D4M16D46M3I3M10I6M2D53M29I10M12I16M10I6M3I22M1D31M33I27M7I12M12I15M1I3M29I15M7I23M46I15M1D13M26I10M6I6M15I11M43I22M1I7M3I4M16I15M25I14M2I21M1D22M15I3M4I10M3I38M12I7M12I16M31I12M18I39M7I28M5D21M17I5M19I53M20I6M72I15M14I15M1I20M1I15M2I4M5I16M2I6M1D16M21I147M2I510M1I8M3I20M2I7M1D3M1D460M1D221M1I11M4D120M3I11M3D284M1I762M1D653M1I9M4I11M1I274M4D20M2I9M3I17M2I9M3D10M3D13M2I55M6I18M, score1=13993, score2=5071, ref_begin1=194, ref_end1=8687, read_begin1=194, read_end1=10239, ref_end2=3554)
AlignmentRecord(refName=UniRef100_A0A0L8I8R7, refSequence.take(100)=MLLNRNFPSTLIEMRSLLADFSRFRLEEVPPRLELKQKLFRLFDEIQALSNDTLPLGLEDELYPKNVERLFSRFLLAQQEKDMAIQSELVRLERLQRLAE, cigar=365M1D298M9D20M3D9M1I36M1I104M2I10M5D133M4I105M5I22M1I8M1I24M4I157M1D286M1I30M1I92M5D17M1D10M6D43M2I119M1D2M2I28M1D331M9D10M6I13M1D32M9I12M11I76M5I42M1I163M4D17M4I22M6I4M4I6M3I6M6I11M1D9M3I25M1I43M2I5M4D19M4I9M2I12M38I16M19I6M7I12M1D18M4I21M5I33M7I20M4I5M1D2M16I29M6I18M12I10M11I9M12I5M2I4M11I4M6I16M1I10M10I17M13I4M3I16M11I6M20I4M3I2M24I26M2I25M12I12M2I13M2D30M9I53M3D3M7I38M3D23M3D8M1D5M1I59M19I28M1D21M3I7M4I3M13I15M16I43M6D26M2I11M12I8M5I9M2I6M5I17M1I54M4I3M6I2M8I37M22I24M1D7M25I16M1I9M42I5M6I10M43I14M3I12M10I3M10I41M1D10M12I5M12I12M9I4M14I4M57I41M22I22M9I39M3D10M4D12M3I19M2I7M11I6M18I21M8I9M5I5M16I11M14I20M2I37M3D4M16D46M3I3M10I6M2D53M29I10M12I16M10I6M3I22M1D31M33I27M7I12M12I15M1I3M29I15M7I23M46I15M1D13M26I10M6I6M15I11M43I22M1I7M3I4M16I15M25I14M2I21M1D22M15I3M4I10M3I38M12I7M12I16M31I12M18I39M7I28M5D21M17I5M19I53M20I6M72I15M14I15M1I20M1I15M2I4M5I16M2I6M1D16M21I147M2I510M1I8M3I20M2I7M1D3M1D460M1D221M1I11M4D120M3I11M3D284M1I762M1D653M1I9M4I11M1I214M20I40M4D20M2I9M3I17M2I9M3D10M3D13M2I55M6I18M, score1=13945, score2=5059, ref_begin1=194, ref_end1=8667, read_begin1=194, read_end1=10239, ref_end2=3543)

topK:5 Query:UniRef100_A0A0L1HXI4
AlignmentRecord(refName=UniRef100_A0A0L1HXI4, refSequence.take(100)=MWSRLTGSSAASNSNKDDDSRRRRTSDSTRSKRDRDPDTRSMVSSTSTRKPSSTPRRDAAPSSSSIASFTTAFDDMPRSRVSANTNPNSDRYDDADAAHD, cigar=10244M, score1=54065, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_E3RQI2, refSequence.take(100)=MWSRLTGSSAASSSSKDEDSRRRRTSDSTRSKRDRETGDTRSVVSSTSTRKPPSTRRETAGSSIVSFATAFDEMPRSRATTNTNPNTSTNSDLYDDPENY, cigar=37M1D17M1I5M2I25M4D9M5I22M1D44M1D12M1D25M10I56M1I83M1D126M2D21M1D9M1I101M1D8M3I90M3I73M1D24M1I62M6I153M2D113M1I34M3D58M4D142M3D52M2D84M1D24M16D42M2I136M3I120M9D17M1I9M14I37M1D3M3I40M1I20M2I17M1D12M4D33M2I38M111D90M5I47M1I23M3D28M5D46M11D3M1I9M1I46M1I55M1I32M1D24M16I157M1I19M1I50M1D34M16I71M1I56M2I26M1I56M3D14M1I19M2D2M11D13M11D10M3D30M3I5M1I12M4D10M4D4M5I39M4I14M2I11M1I23M6I31M23D32M9D5M12D4M11D3M16D14M3D7M4D11M4D9M8D97M1I31M22I11M10I18M1I5M6I18M3I21M1D9M1I13M84I7M85I4M37I96M8D48M11I61M1D11M1D12M1D12M23D8M1I16M1I43M14D11M20D13M1D21M4D15M1I28M6D10M2D33M44D14M1I32M1D15M1D26M10D7M1I22M2I25M5I10M2D13M1I72M3D5M3D60M6D8M8D20M6D17M2D11M3D6M1I61M1D2M20D29M16D7M49D4M51D73M2I43M1I26M3I22M3D27M4D16M3D4M6D4M1I62M1I25M2D7M1D33M3D18M2D6M3D38M1D8M5D50M1D35M1I19M7I11M11I16M3I11M13I24M4I27M2I10M2I18M15I5M28I13M2I51M1I42M2I17M4D50M14D84M6D37M6I5M35I7M14I16M1D94M3D30M4D8M4D10M7D49M1D5M2I7M1I3M11D44M3D2M5D7M2D6M5D13M6I24M2I3M6D22M1D5M1I13M1D10M1D27M1D53M1I8M2I45M5I32M7I2M3I11M5I49M2I6M6I15M8I48M30D39M1D17M1D6M1D35M3I51M12I2M4I15M2I14M3D70M2D24M3D44M1D15M1D12M2D4M1D60M1D65M1D35M4I24M1D52M3D32M2I18M1I17M4I17M2I15M2I20M1I15M4D3M2D18M1D13M2I5M8D10M1I7M9D10M7D106M1D18M1D10M8I10M1D6M6I77M4D34M4I5M2D26M1D4M23I4M12I6M1D12M2I5M5I40M7I3M5I17M27I7M35I11M31I9M7I22M1I25M2I5M21I16M12I8M7I9M1D55M1I41M18I13M5I21M1D16M1D20M1D7M3D87M1D3M8I32M9D226M3I5M4D39M6D39M3D22M1I11M1I7M3I53M11D10M7D150M2D6M3I5M1D64M2D8M5I69M2I43M2D5M2D584M9D21M, score1=22332, score2=12922, ref_begin1=0, ref_end1=9818, read_begin1=0, read_end1=9834, ref_end2=4686)
AlignmentRecord(refName=UniRef100_B2VU89, refSequence.take(100)=MWSRLTGSSAASNSSKDEESRRRRTSDSTRSKRDRETGEARSVVSSTSTRKPPSTRRETAGSSIVSFATAFDEMPRSRATTNTNPNTNTNSDLYDDPENY, cigarscore1=21877, score2=12720, ref_begin1=0, ref_end1=9656, read_begin1=0, read_end1=9774, ref_end2=4527)
AlignmentRecord(refName=UniRef100_W6YRA0, refSequence.take(100)=MWSRLTGSSGASQSPKDDDARRRRTTTSDSTRSKRDRDRDPDTRSVVSSTSTRKPSVSRRDTAPSSTASFTTAFDDIPRSRAAPNTDPNSDYDRRRDDRR, cigar=24M2D8M2D19M1I12M2I24M12I25M1D14M1I71M10D3M4I262M4D136M3I96M4I14M2I76M1I223M1D96M6I10M4D30M2I95M6I35M67D117M2D90M3I15M1D43M2I193M5I41M2D36M16I42M6I83M3I20M6D28M1D41M6I221M1I11M8D11M1I34M4D59M4I2M2I28M1D27M20I53M1D26M1I26M3I118M1D33M1D85M1I28M10D94M1I61M5I9M1I21M5I114M5I16M1D2M6I20M1D5M2D9M1D36M8D13M26D20M1D45M2D26M4D32M4D4M1I6M5I13M53I7M16I4M46I12M1D14M30I2M14I21M1D11M35I18M7I5M69I31M2I13M2D9M4D20M8I19M8I11M10I13M3I26M1D24M1I16M1D23M2I16M4I3M7I6M5I11M40I16M1D22M2D8M5D4M1I32M6D24M4I6M4I37M62I8M5I9M82I5M5I80M2D15M17I8M1D51M1D8M13D6M5D9M1I19M23D41M10D5M73D53M1D26M55I8M10I15M18I16M7I12M4I7M7I34M1D68M1D31M9D38M24I6M6I28M19I15M24I6M10I7M17I2M8I11M46I10M27I30M9I6M1I3M20I13M1D10M29I9M56I14M34I22M2D17M2I28M1D21M1D7M3I4M9I8M2I8M1I11M25I6M6I18M5I113M1I69M1D23M3D21M3I8M7I3M1I12M1D35M1I32M5D13M3I7M3I9M1I11M4D41M8I14M10I12M1I23M25I16M15I37M1I20M28I2M5I42M1D26M31I39M22I3M25I107M2I10M14I11M2I8M3I17M5I49M1D12M1D72M1D121M1I8M3I52M3D82M4I81M1D11M16I8M2I19M4D41M1I45M20I21M5I8M17I60M6I34M3I32M1D20M11I25M8I5M33I17M12I2M2I27M1I23M26I2M47I8M28I13M1I16M9I8M16I10M7I5M3I9M2I15M6I17M25I27M4I3M68I5M20I5M3I4M17I6M6I78M21D194M3I65M3I2M28I91M9I53M2I19M49I4M6I15M1D8M1I55M2I70M1D14M4D34M1I101M1D586M, score1=21443, score2=11496, ref_begin1=0, ref_end1=8309, read_begin1=0, read_end1=9832, ref_end2=3184)
AlignmentRecord(refName=UniRef100_E5ACN6, refSequence.take(100)=MWSRFTGKSDSSSSASAKDRDEDARRRRRPSESTRSKRERDSDARSVVSSTSTRKPSRRDTAPSSIASFATAFDDVPRSQPTHEVYDSGRDDRYPSSPST, cigarscore1=16323, score2=9878, ref_begin1=0, ref_end1=9739, read_begin1=0, read_end1=9825, ref_end2=4604)

topK:5 Query:UniRef100_A0A0L7M5X2
AlignmentRecord(refName=UniRef100_A0A0L7M5X2, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=10240M, score1=55757, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_W4IKS5, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=8535M43D1705M, score1=55646, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_W7G1W4, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=588M1D191M7D897M1D1400M2I3396M2I199M2D512M1D376M7D972M43D749M2I954M, score1=55409, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_W7JS47, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=588M1D191M15D897M1D1400M2I2796M15D8M1D592M2I711M1D387M2D961M43D749M2I636M1D318M, score1=55378, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_A0A0L7K719, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=587M1I191M21D2297M2I1038M2D2358M2I1097M1I961M43D749M2I636M2D317M, score1=55385, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)

topK:5 Query:UniRef100_A0A0L0CSA9
AlignmentRecord(refName=UniRef100_A0A0L0CSA9, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=10229M, score1=55680, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_W4IKS5, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=3076M2D106M20D3179M19D72M2D864M1D1M7D222M3D1753M2D635M1D315M, score1=55320, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_A0A0L7K719, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=587M1I191M21D2403M20D912M2D2267M19D936M1D1M7D222M2D2388M3D315M, score1=55283, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_W7G1W4, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=588M1D191M7D897M1D1506M20D3179M19D271M2D512M1D153M1D1M7D213M8D1M2D2396M1D315M, score1=55289, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)
AlignmentRecord(refName=UniRef100_W7JS47, refSequence.take(100)=MKDLYSLYEDISENDKIIISEKLKNLLNYFQDKNKSYVSEFVVVSRTRFFKSISNYGEFLLLQSSSRVISSYEHILRLLHQAKVYLEFVRCLKLNNCSVI, cigar=588M1D191M15D897M1D1506M20D2670M15D8M1D501M19D783M1D153M1D1M7D222M5D2388M2D315M, score1=55261, score2=0, ref_begin1=0, ref_end1=0, read_begin1=0, read_end1=0, ref_end2=0)

BLOSUM62	/queryD/D9L10240N4	/Luniref/DL9Line.fasta	256	1	5	11	1	
[Stage 0:>                                                          (0 + 2) / 2][Stage 0:=============================>                             (1 + 1) / 2]                                                                                [Stage 1:>                                                       (0 + 76) / 256][Stage 1:>                                                       (0 + 88) / 256]Exception in thread "main" org.apache.spark.SparkException: Job aborted due to stage failure: Task 35 in stage 1.0 failed 4 times, most recent failure: Lost task 35.3 in stage 1.0 (TID 99, emr-worker-20.cluster-36293): java.lang.NoClassDefFoundError: Could not initialize class parasail.Matrix
	at parasail.RunParasail.createProfile(RunParasail.java:79)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:40)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:37)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)
	at scala.collection.convert.Wrappers$IteratorWrapper.next(Wrappers.scala:30)
	at org.spark-project.guava.collect.Ordering.leastOf(Ordering.java:658)
	at org.apache.spark.util.collection.Utils$.takeOrdered(Utils.scala:37)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1391)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1388)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:66)
	at org.apache.spark.scheduler.Task.run(Task.scala:89)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:227)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Driver stacktrace:
	at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1431)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1419)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1418)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1418)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at scala.Option.foreach(Option.scala:236)
	at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1640)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1599)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1588)
	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)
	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:620)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1832)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1952)
	at org.apache.spark.rdd.RDD$$anonfun$reduce$1.apply(RDD.scala:1025)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.reduce(RDD.scala:1007)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1.apply(RDD.scala:1397)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.takeOrdered(RDD.scala:1384)
	at org.apache.spark.rdd.RDD$$anonfun$top$1.apply(RDD.scala:1365)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.top(RDD.scala:1364)
	at org.dsa.core.DSW2ATM.align(DSW2ATM.scala:53)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:43)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:42)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.dsa.core.DSASequenceAlignment.run(DSASequenceAlignment.scala:42)
	at org.dsa.core.DSW2ATM$.main(DSW2ATM.scala:169)
	at org.dsa.time.aliyunDSW2ATMQueryTime$$anonfun$main$1$$anonfun$apply$mcVI$sp$1.apply$mcVI$sp(aliyunDSW2ATMQueryTime.scala:19)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryTime$$anonfun$main$1.apply$mcVI$sp(aliyunDSW2ATMQueryTime.scala:14)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryTime$.main(aliyunDSW2ATMQueryTime.scala:13)
	at org.dsa.time.aliyunDSW2ATMQueryTime.main(aliyunDSW2ATMQueryTime.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:731)
	at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:181)
	at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:206)
	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:121)
	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)
Caused by: java.lang.NoClassDefFoundError: Could not initialize class parasail.Matrix
	at parasail.RunParasail.createProfile(RunParasail.java:79)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:40)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:37)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)
	at scala.collection.convert.Wrappers$IteratorWrapper.next(Wrappers.scala:30)
	at org.spark-project.guava.collect.Ordering.leastOf(Ordering.java:658)
	at org.apache.spark.util.collection.Utils$.takeOrdered(Utils.scala:37)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1391)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1388)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:66)
	at org.apache.spark.scheduler.Task.run(Task.scala:89)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:227)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
BLOSUM62	/queryD/D9L10240N4	/Luniref/DL9Line.fasta	256	1	5	11	1	
[Stage 0:>                                                          (0 + 2) / 2]                                                                                [Stage 1:>                                                       (0 + 76) / 256][Stage 1:>                                                       (0 + 88) / 256]Exception in thread "main" org.apache.spark.SparkException: Job aborted due to stage failure: Task 3 in stage 1.0 failed 4 times, most recent failure: Lost task 3.3 in stage 1.0 (TID 98, emr-worker-20.cluster-36293): java.lang.NoClassDefFoundError: Could not initialize class parasail.Matrix
	at parasail.RunParasail.createProfile(RunParasail.java:79)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:40)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:37)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)
	at scala.collection.convert.Wrappers$IteratorWrapper.next(Wrappers.scala:30)
	at org.spark-project.guava.collect.Ordering.leastOf(Ordering.java:658)
	at org.apache.spark.util.collection.Utils$.takeOrdered(Utils.scala:37)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1391)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1388)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:66)
	at org.apache.spark.scheduler.Task.run(Task.scala:89)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:227)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Driver stacktrace:
	at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1431)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1419)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1418)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1418)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at scala.Option.foreach(Option.scala:236)
	at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1640)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1599)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1588)
	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)
	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:620)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1832)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1952)
	at org.apache.spark.rdd.RDD$$anonfun$reduce$1.apply(RDD.scala:1025)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.reduce(RDD.scala:1007)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1.apply(RDD.scala:1397)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.takeOrdered(RDD.scala:1384)
	at org.apache.spark.rdd.RDD$$anonfun$top$1.apply(RDD.scala:1365)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.top(RDD.scala:1364)
	at org.dsa.core.DSW2ATM.align(DSW2ATM.scala:53)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:43)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:42)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.dsa.core.DSASequenceAlignment.run(DSASequenceAlignment.scala:42)
	at org.dsa.core.DSW2ATM$.main(DSW2ATM.scala:169)
	at org.dsa.time.aliyunDSW2ATMQueryTime$$anonfun$main$1$$anonfun$apply$mcVI$sp$1.apply$mcVI$sp(aliyunDSW2ATMQueryTime.scala:19)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryTime$$anonfun$main$1.apply$mcVI$sp(aliyunDSW2ATMQueryTime.scala:14)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryTime$.main(aliyunDSW2ATMQueryTime.scala:13)
	at org.dsa.time.aliyunDSW2ATMQueryTime.main(aliyunDSW2ATMQueryTime.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:731)
	at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:181)
	at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:206)
	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:121)
	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)
Caused by: java.lang.NoClassDefFoundError: Could not initialize class parasail.Matrix
	at parasail.RunParasail.createProfile(RunParasail.java:79)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:40)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:37)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)
	at scala.collection.convert.Wrappers$IteratorWrapper.next(Wrappers.scala:30)
	at org.spark-project.guava.collect.Ordering.leastOf(Ordering.java:658)
	at org.apache.spark.util.collection.Utils$.takeOrdered(Utils.scala:37)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1391)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1388)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:66)
	at org.apache.spark.scheduler.Task.run(Task.scala:89)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:227)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
BLOSUM62	/queryD/D9L392N40	/Luniref/DL9Line.fasta	256	1	5	11	1	
[Stage 0:>                                                          (0 + 2) / 2]                                                                                [Stage 1:>                                                       (0 + 76) / 256][Stage 1:>                                                       (0 + 88) / 256][Stage 1:>                                                       (1 + 88) / 256][Stage 1:>                                                       (3 + 84) / 256][Stage 1:=>                                                      (5 + 80) / 256][Stage 1:=>                                                      (5 + 78) / 256][Stage 1:==>                                                    (10 + 78) / 256][Stage 1:=======>                                               (34 + 78) / 256][Stage 1:==========>                                            (50 + 78) / 256][Stage 1:=============>                                         (62 + 75) / 256][Stage 1:==============>                                        (68 + 74) / 256][Stage 1:===============>                                       (70 + 74) / 256][Stage 1:===============>                                       (72 + 74) / 256][Stage 1:================>                                      (75 + 74) / 256][Stage 1:================>                                      (76 + 74) / 256][Stage 1:================>                                      (77 + 74) / 256][Stage 1:================>                                      (79 + 72) / 256][Stage 1:=================>                                     (80 + 72) / 256][Stage 1:=================>                                     (83 + 72) / 256][Stage 1:==================>                                    (84 + 72) / 256][Stage 1:===================>                                   (90 + 69) / 256][Stage 1:=====================>                                 (98 + 65) / 256][Stage 1:=======================>                              (111 + 59) / 256][Stage 1:=======================>                              (113 + 59) / 256][Stage 1:========================>                             (116 + 59) / 256][Stage 1:=========================>                            (121 + 58) / 256][Stage 1:==========================>                           (126 + 56) / 256][Stage 1:===========================>                          (132 + 53) / 256][Stage 1:============================>                         (137 + 51) / 256][Stage 1:=============================>                        (140 + 48) / 256][Stage 1:==============================>                       (143 + 45) / 256][Stage 1:==============================>                       (145 + 43) / 256][Stage 1:===============================>                      (147 + 41) / 256][Stage 1:===============================>                      (148 + 40) / 256][Stage 1:================================>                     (152 + 37) / 256][Stage 1:================================>                     (153 + 36) / 256][Stage 1:================================>                     (156 + 33) / 256][Stage 1:=================================>                    (158 + 31) / 256][Stage 1:=================================>                    (160 + 29) / 256][Stage 1:=================================>                    (161 + 28) / 256][Stage 1:==================================>                   (163 + 26) / 256][Stage 1:===================================>                  (166 + 23) / 256][Stage 1:===================================>                  (170 + 19) / 256][Stage 1:====================================>                 (174 + 16) / 256][Stage 1:=====================================>                (178 + 12) / 256][Stage 1:=====================================>                (180 + 10) / 256][Stage 1:======================================>               (182 + 10) / 256][Stage 1:=======================================>               (184 + 8) / 256][Stage 1:========================================>              (187 + 5) / 256][Stage 1:========================================>              (188 + 4) / 256][Stage 1:========================================>              (189 + 3) / 256][Stage 1:========================================>              (190 + 2) / 256][Stage 1:=========================================>             (192 + 0) / 256][Stage 1:========================================>             (192 + 64) / 256][Stage 1:=========================================>            (195 + 61) / 256][Stage 1:=========================================>            (198 + 58) / 256][Stage 1:==========================================>           (202 + 54) / 256][Stage 1:=============================================>        (214 + 42) / 256][Stage 1:==============================================>       (220 + 36) / 256][Stage 1:=================================================>    (234 + 22) / 256][Stage 1:==================================================>   (240 + 16) / 256][Stage 1:===================================================>  (244 + 12) / 256][Stage 1:===================================================>  (245 + 11) / 256][Stage 1:=====================================================> (247 + 9) / 256][Stage 1:=====================================================> (248 + 8) / 256][Stage 1:=====================================================> (249 + 7) / 256][Stage 1:=====================================================> (250 + 6) / 256][Stage 1:=====================================================> (251 + 5) / 256][Stage 1:======================================================>(252 + 4) / 256][Stage 1:======================================================>(253 + 3) / 256][Stage 1:======================================================>(255 + 1) / 256]Exception in thread "main" org.apache.spark.SparkException: Job aborted due to stage failure: Task 163 in stage 1.0 failed 4 times, most recent failure: Lost task 163.3 in stage 1.0 (TID 289, emr-worker-13.cluster-36293): org.apache.spark.storage.BlockFetchException: Failed to fetch block from 1 locations. Most recent failure cause:
	at org.apache.spark.storage.BlockManager$$anonfun$doGetRemote$2.apply(BlockManager.scala:605)
	at org.apache.spark.storage.BlockManager$$anonfun$doGetRemote$2.apply(BlockManager.scala:595)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at org.apache.spark.storage.BlockManager.doGetRemote(BlockManager.scala:595)
	at org.apache.spark.storage.BlockManager.getRemote(BlockManager.scala:580)
	at org.apache.spark.storage.BlockManager.get(BlockManager.scala:640)
	at org.apache.spark.CacheManager.getOrCompute(CacheManager.scala:44)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:268)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:66)
	at org.apache.spark.scheduler.Task.run(Task.scala:89)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:227)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Failed to connect to emr-worker-24.cluster-36293/10.27.71.227:57492
	at org.apache.spark.network.client.TransportClientFactory.createClient(TransportClientFactory.java:216)
	at org.apache.spark.network.client.TransportClientFactory.createClient(TransportClientFactory.java:167)
	at org.apache.spark.network.netty.NettyBlockTransferService$$anon$1.createAndStart(NettyBlockTransferService.scala:90)
	at org.apache.spark.network.shuffle.RetryingBlockFetcher.fetchAllOutstanding(RetryingBlockFetcher.java:140)
	at org.apache.spark.network.shuffle.RetryingBlockFetcher.access$200(RetryingBlockFetcher.java:43)
	at org.apache.spark.network.shuffle.RetryingBlockFetcher$1.run(RetryingBlockFetcher.java:170)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	... 3 more
Caused by: java.net.ConnectException: Connection refused: emr-worker-24.cluster-36293/10.27.71.227:57492
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:224)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:289)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:528)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	... 1 more

Driver stacktrace:
	at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1431)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1419)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1418)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1418)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at scala.Option.foreach(Option.scala:236)
	at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1640)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1599)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1588)
	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)
	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:620)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1832)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1952)
	at org.apache.spark.rdd.RDD$$anonfun$reduce$1.apply(RDD.scala:1025)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.reduce(RDD.scala:1007)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1.apply(RDD.scala:1397)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.takeOrdered(RDD.scala:1384)
	at org.apache.spark.rdd.RDD$$anonfun$top$1.apply(RDD.scala:1365)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.top(RDD.scala:1364)
	at org.dsa.core.DSW2ATM.align(DSW2ATM.scala:53)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:43)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:42)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.dsa.core.DSASequenceAlignment.run(DSASequenceAlignment.scala:42)
	at org.dsa.core.DSW2ATM$.main(DSW2ATM.scala:169)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time$$anonfun$main$1$$anonfun$apply$mcVI$sp$1.apply$mcVI$sp(aliyunDSW2ATMQueryD9L392N40Time.scala:19)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time$$anonfun$main$1.apply$mcVI$sp(aliyunDSW2ATMQueryD9L392N40Time.scala:14)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time$.main(aliyunDSW2ATMQueryD9L392N40Time.scala:13)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time.main(aliyunDSW2ATMQueryD9L392N40Time.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:731)
	at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:181)
	at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:206)
	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:121)
	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)
Caused by: org.apache.spark.storage.BlockFetchException: Failed to fetch block from 1 locations. Most recent failure cause:
	at org.apache.spark.storage.BlockManager$$anonfun$doGetRemote$2.apply(BlockManager.scala:605)
	at org.apache.spark.storage.BlockManager$$anonfun$doGetRemote$2.apply(BlockManager.scala:595)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at org.apache.spark.storage.BlockManager.doGetRemote(BlockManager.scala:595)
	at org.apache.spark.storage.BlockManager.getRemote(BlockManager.scala:580)
	at org.apache.spark.storage.BlockManager.get(BlockManager.scala:640)
	at org.apache.spark.CacheManager.getOrCompute(CacheManager.scala:44)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:268)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:66)
	at org.apache.spark.scheduler.Task.run(Task.scala:89)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:227)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Failed to connect to emr-worker-24.cluster-36293/10.27.71.227:57492
	at org.apache.spark.network.client.TransportClientFactory.createClient(TransportClientFactory.java:216)
	at org.apache.spark.network.client.TransportClientFactory.createClient(TransportClientFactory.java:167)
	at org.apache.spark.network.netty.NettyBlockTransferService$$anon$1.createAndStart(NettyBlockTransferService.scala:90)
	at org.apache.spark.network.shuffle.RetryingBlockFetcher.fetchAllOutstanding(RetryingBlockFetcher.java:140)
	at org.apache.spark.network.shuffle.RetryingBlockFetcher.access$200(RetryingBlockFetcher.java:43)
	at org.apache.spark.network.shuffle.RetryingBlockFetcher$1.run(RetryingBlockFetcher.java:170)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	... 3 more
Caused by: java.net.ConnectException: Connection refused: emr-worker-24.cluster-36293/10.27.71.227:57492
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:224)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:289)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:528)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	... 1 more
BLOSUM62	/queryD/D9L392N40	/Luniref/DL9Line.fasta	256	1	5	11	1	
[Stage 0:>                                                          (0 + 2) / 2][Stage 0:=============================>                             (1 + 1) / 2]                                                                                [Stage 1:>                                                       (0 + 76) / 256][Stage 1:>                                                       (0 + 96) / 256][Stage 1:>                                                       (1 + 96) / 256][Stage 1:>                                                       (1 + 92) / 256][Stage 1:>                                                       (2 + 84) / 256][Stage 1:>                                                       (3 + 80) / 256][Stage 1:>                                                       (3 + 76) / 256][Stage 1:>                                                       (4 + 76) / 256][Stage 1:=>                                                      (9 + 76) / 256][Stage 1:===>                                                   (16 + 76) / 256][Stage 1:=====>                                                 (25 + 76) / 256][Stage 1:=======>                                               (35 + 76) / 256][Stage 1:=========>                                             (45 + 76) / 256][Stage 1:==========>                                            (50 + 76) / 256][Stage 1:============>                                          (60 + 76) / 256][Stage 1:==============>                                        (67 + 76) / 256][Stage 1:===============>                                       (73 + 75) / 256][Stage 1:===============>                                       (74 + 75) / 256][Stage 1:================>                                      (75 + 75) / 256][Stage 1:================>                                      (76 + 75) / 256][Stage 1:================>                                      (78 + 75) / 256][Stage 1:================>                                      (79 + 74) / 256][Stage 1:=================>                                     (80 + 74) / 256][Stage 1:=================>                                     (82 + 73) / 256][Stage 1:==================>                                    (84 + 72) / 256][Stage 1:===================>                                   (92 + 72) / 256][Stage 1:====================>                                  (94 + 70) / 256][Stage 1:====================>                                  (97 + 70) / 256][Stage 1:======================>                               (108 + 66) / 256][Stage 1:=======================>                              (113 + 64) / 256][Stage 1:========================>                             (118 + 61) / 256][Stage 1:=========================>                            (121 + 60) / 256][Stage 1:=========================>                            (123 + 59) / 256][Stage 1:==========================>                           (125 + 57) / 256][Stage 1:===========================>                          (129 + 56) / 256][Stage 1:============================>                         (135 + 53) / 256][Stage 1:=============================>                        (141 + 48) / 256][Stage 1:==============================>                       (145 + 44) / 256][Stage 1:===============================>                      (147 + 44) / 256][Stage 1:===============================>                      (150 + 41) / 256][Stage 1:===============================>                      (151 + 40) / 256][Stage 1:================================>                     (154 + 37) / 256][Stage 1:================================>                     (156 + 35) / 256][Stage 1:=================================>                    (159 + 32) / 256][Stage 1:==================================>                   (163 + 28) / 256][Stage 1:==================================>                   (165 + 26) / 256][Stage 1:===================================>                  (167 + 24) / 256][Stage 1:===================================>                  (170 + 21) / 256][Stage 1:====================================>                 (173 + 21) / 256][Stage 1:====================================>                 (174 + 20) / 256][Stage 1:====================================>                 (175 + 19) / 256][Stage 1:=====================================>                (179 + 15) / 256][Stage 1:======================================>               (181 + 13) / 256][Stage 1:======================================>               (182 + 12) / 256][Stage 1:======================================>               (184 + 10) / 256][Stage 1:=======================================>               (186 + 8) / 256][Stage 1:========================================>              (188 + 6) / 256][Stage 1:========================================>              (189 + 5) / 256][Stage 1:========================================>              (190 + 4) / 256][Stage 1:=========================================>             (191 + 3) / 256][Stage 1:========================================>             (191 + 65) / 256][Stage 1:========================================>             (192 + 64) / 256][Stage 1:========================================>             (193 + 63) / 256][Stage 1:========================================>             (194 + 62) / 256][Stage 1:=========================================>            (199 + 57) / 256][Stage 1:==========================================>           (203 + 53) / 256][Stage 1:===========================================>          (205 + 51) / 256][Stage 1:============================================>         (212 + 44) / 256][Stage 1:==============================================>       (219 + 37) / 256][Stage 1:===============================================>      (224 + 32) / 256][Stage 1:================================================>     (230 + 26) / 256][Stage 1:==================================================>   (240 + 16) / 256][Stage 1:==================================================>   (241 + 15) / 256][Stage 1:===================================================>  (242 + 14) / 256][Stage 1:===================================================>  (243 + 13) / 256][Stage 1:===================================================>  (244 + 12) / 256][Stage 1:===================================================>  (245 + 11) / 256][Stage 1:===================================================>  (246 + 10) / 256][Stage 1:=====================================================> (247 + 9) / 256][Stage 1:=====================================================> (248 + 8) / 256]Exception in thread "main" org.apache.spark.SparkException: Job aborted due to stage failure: Task 11 in stage 1.0 failed 4 times, most recent failure: Lost task 11.3 in stage 1.0 (TID 301, emr-worker-23.cluster-36293): java.lang.UnsatisfiedLinkError: no JNIparasail in java.library.path
	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1867)
	at java.lang.Runtime.loadLibrary0(Runtime.java:870)
	at java.lang.System.loadLibrary(System.java:1122)
	at parasail.JNIparasail.<clinit>(JNIparasail.java:7)
	at parasail.Matrix.lookup(Matrix.java:106)
	at parasail.Matrix.<clinit>(Matrix.java:8)
	at parasail.RunParasail.createProfile(RunParasail.java:79)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:40)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:37)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)
	at scala.collection.convert.Wrappers$IteratorWrapper.next(Wrappers.scala:30)
	at org.spark-project.guava.collect.Ordering.leastOf(Ordering.java:658)
	at org.apache.spark.util.collection.Utils$.takeOrdered(Utils.scala:37)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1391)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1388)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:66)
	at org.apache.spark.scheduler.Task.run(Task.scala:89)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:227)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Driver stacktrace:
	at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1431)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1419)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1418)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1418)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at scala.Option.foreach(Option.scala:236)
	at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1640)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1599)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1588)
	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)
	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:620)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1832)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1952)
	at org.apache.spark.rdd.RDD$$anonfun$reduce$1.apply(RDD.scala:1025)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.reduce(RDD.scala:1007)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1.apply(RDD.scala:1397)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.takeOrdered(RDD.scala:1384)
	at org.apache.spark.rdd.RDD$$anonfun$top$1.apply(RDD.scala:1365)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.top(RDD.scala:1364)
	at org.dsa.core.DSW2ATM.align(DSW2ATM.scala:53)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:43)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:42)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.dsa.core.DSASequenceAlignment.run(DSASequenceAlignment.scala:42)
	at org.dsa.core.DSW2ATM$.main(DSW2ATM.scala:169)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time$$anonfun$main$1$$anonfun$apply$mcVI$sp$1.apply$mcVI$sp(aliyunDSW2ATMQueryD9L392N40Time.scala:19)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time$$anonfun$main$1.apply$mcVI$sp(aliyunDSW2ATMQueryD9L392N40Time.scala:14)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time$.main(aliyunDSW2ATMQueryD9L392N40Time.scala:13)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time.main(aliyunDSW2ATMQueryD9L392N40Time.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:731)
	at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:181)
	at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:206)
	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:121)
	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)
Caused by: java.lang.UnsatisfiedLinkError: no JNIparasail in java.library.path
	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1867)
	at java.lang.Runtime.loadLibrary0(Runtime.java:870)
	at java.lang.System.loadLibrary(System.java:1122)
	at parasail.JNIparasail.<clinit>(JNIparasail.java:7)
	at parasail.Matrix.lookup(Matrix.java:106)
	at parasail.Matrix.<clinit>(Matrix.java:8)
	at parasail.RunParasail.createProfile(RunParasail.java:79)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:40)
	at org.dsa.core.DSW2ATM$$anonfun$1.apply(DSW2ATM.scala:37)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)
	at scala.collection.convert.Wrappers$IteratorWrapper.next(Wrappers.scala:30)
	at org.spark-project.guava.collect.Ordering.leastOf(Ordering.java:658)
	at org.apache.spark.util.collection.Utils$.takeOrdered(Utils.scala:37)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1391)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1$$anonfun$29.apply(RDD.scala:1388)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:270)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:66)
	at org.apache.spark.scheduler.Task.run(Task.scala:89)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:227)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
BLOSUM62	/queryD/D9L392N40	/Luniref/DL9Line.fasta	256	1	5	11	1	
[Stage 0:>                                                          (0 + 0) / 2][Stage 0:>                                                          (0 + 2) / 2]                                                                                [Stage 1:>                                                       (0 + 76) / 256][Stage 1:>                                                       (0 + 96) / 256][Stage 1:>                                                       (2 + 88) / 256][Stage 1:>                                                       (4 + 78) / 256][Stage 1:=>                                                      (7 + 78) / 256][Stage 1:=>                                                      (8 + 78) / 256][Stage 1:=>                                                      (9 + 78) / 256][Stage 1:==>                                                    (11 + 77) / 256][Stage 1:====>                                                  (20 + 77) / 256][Stage 1:=====>                                                 (26 + 77) / 256][Stage 1:========>                                              (38 + 77) / 256][Stage 1:===========>                                           (52 + 76) / 256][Stage 1:==============>                                        (67 + 73) / 256][Stage 1:===============>                                       (71 + 73) / 256][Stage 1:===============>                                       (72 + 73) / 256][Stage 1:===============>                                       (73 + 73) / 256][Stage 1:===============>                                       (74 + 73) / 256][Stage 1:================>                                      (75 + 73) / 256][Stage 1:================>                                      (76 + 73) / 256][Stage 1:================>                                      (77 + 72) / 256][Stage 1:================>                                      (79 + 72) / 256][Stage 1:=================>                                     (80 + 72) / 256][Stage 1:=================>                                     (82 + 72) / 256][Stage 1:==================>                                    (84 + 72) / 256][Stage 1:==================>                                    (88 + 72) / 256][Stage 1:====================>                                  (94 + 69) / 256][Stage 1:====================>                                  (95 + 68) / 256][Stage 1:====================>                                  (96 + 68) / 256][Stage 1:====================>                                  (97 + 68) / 256][Stage 1:=====================>                                (103 + 67) / 256][Stage 1:======================>                               (109 + 64) / 256][Stage 1:=======================>                              (111 + 63) / 256][Stage 1:=======================>                              (113 + 63) / 256][Stage 1:=========================>                            (122 + 60) / 256][Stage 1:===========================>                          (128 + 56) / 256][Stage 1:============================>                         (134 + 52) / 256][Stage 1:=============================>                        (141 + 49) / 256][Stage 1:==============================>                       (144 + 46) / 256][Stage 1:===============================>                      (147 + 44) / 256][Stage 1:===============================>                      (148 + 43) / 256][Stage 1:===============================>                      (149 + 42) / 256][Stage 1:===============================>                      (150 + 41) / 256][Stage 1:================================>                     (153 + 38) / 256][Stage 1:================================>                     (155 + 36) / 256][Stage 1:=================================>                    (157 + 34) / 256][Stage 1:=================================>                    (159 + 32) / 256][Stage 1:=================================>                    (160 + 31) / 256][Stage 1:==================================>                   (163 + 28) / 256][Stage 1:==================================>                   (165 + 27) / 256][Stage 1:===================================>                  (166 + 26) / 256][Stage 1:===================================>                  (168 + 24) / 256][Stage 1:===================================>                  (169 + 23) / 256][Stage 1:====================================>                 (173 + 19) / 256][Stage 1:====================================>                 (174 + 18) / 256][Stage 1:=====================================>                (177 + 15) / 256][Stage 1:=====================================>                (180 + 12) / 256][Stage 1:=======================================>               (183 + 9) / 256][Stage 1:=======================================>               (185 + 7) / 256][Stage 1:=======================================>               (186 + 6) / 256][Stage 1:========================================>              (188 + 4) / 256][Stage 1:========================================>              (190 + 2) / 256][Stage 1:=========================================>             (191 + 1) / 256][Stage 1:=========================================>             (192 + 4) / 256][Stage 1:========================================>             (192 + 64) / 256][Stage 1:========================================>             (194 + 62) / 256][Stage 1:=========================================>            (196 + 60) / 256][Stage 1:==========================================>           (202 + 54) / 256][Stage 1:===========================================>          (206 + 50) / 256][Stage 1:============================================>         (210 + 46) / 256][Stage 1:============================================>         (213 + 43) / 256][Stage 1:===============================================>      (223 + 33) / 256][Stage 1:================================================>     (231 + 25) / 256][Stage 1:=================================================>    (234 + 22) / 256][Stage 1:==================================================>   (239 + 17) / 256][Stage 1:==================================================>   (241 + 15) / 256][Stage 1:===================================================>  (243 + 13) / 256][Stage 1:===================================================>  (244 + 12) / 256][Stage 1:===================================================>  (246 + 10) / 256][Stage 1:=====================================================> (248 + 8) / 256][Stage 1:=====================================================> (249 + 7) / 256][Stage 1:=====================================================> (250 + 6) / 256][Stage 1:=====================================================> (251 + 5) / 256]Exception in thread "main" org.apache.spark.SparkException: Job aborted due to stage failure: Task 107 in stage 1.0 failed 4 times, most recent failure: Lost task 107.3 in stage 1.0 (TID 300, emr-worker-21.cluster-36293): ExecutorLostFailure (executor 33 exited caused by one of the running tasks) Reason: Container marked as failed: container_1483083987918_1232_01_000901 on host: emr-worker-21.cluster-36293. Exit status: 50. Diagnostics: Exception from container-launch.
Container id: container_1483083987918_1232_01_000901
Exit code: 50
Stack trace: ExitCodeException exitCode=50: 
	at org.apache.hadoop.util.Shell.runCommand(Shell.java:545)
	at org.apache.hadoop.util.Shell.run(Shell.java:456)
	at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute(Shell.java:722)
	at org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor.launchContainer(DefaultContainerExecutor.java:212)
	at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:302)
	at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:82)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)


Container exited with a non-zero exit code 50

Driver stacktrace:
	at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1431)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1419)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1418)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1418)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)
	at scala.Option.foreach(Option.scala:236)
	at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:799)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1640)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1599)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1588)
	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)
	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:620)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1832)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1952)
	at org.apache.spark.rdd.RDD$$anonfun$reduce$1.apply(RDD.scala:1025)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.reduce(RDD.scala:1007)
	at org.apache.spark.rdd.RDD$$anonfun$takeOrdered$1.apply(RDD.scala:1397)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.takeOrdered(RDD.scala:1384)
	at org.apache.spark.rdd.RDD$$anonfun$top$1.apply(RDD.scala:1365)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:316)
	at org.apache.spark.rdd.RDD.top(RDD.scala:1364)
	at org.dsa.core.DSW2ATM.align(DSW2ATM.scala:53)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:43)
	at org.dsa.core.DSASequenceAlignment$$anonfun$run$1.apply(DSASequenceAlignment.scala:42)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.dsa.core.DSASequenceAlignment.run(DSASequenceAlignment.scala:42)
	at org.dsa.core.DSW2ATM$.main(DSW2ATM.scala:169)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time$$anonfun$main$1$$anonfun$apply$mcVI$sp$1.apply$mcVI$sp(aliyunDSW2ATMQueryD9L392N40Time.scala:19)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time$$anonfun$main$1.apply$mcVI$sp(aliyunDSW2ATMQueryD9L392N40Time.scala:14)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time$.main(aliyunDSW2ATMQueryD9L392N40Time.scala:13)
	at org.dsa.time.aliyunDSW2ATMQueryD9L392N40Time.main(aliyunDSW2ATMQueryD9L392N40Time.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:731)
	at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:181)
	at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:206)
	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:121)
	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)
Exception in thread "yarn-scheduler-ask-am-thread-pool-1" java.lang.Error: java.lang.InterruptedException: sleep interrupted
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1148)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.InterruptedException: sleep interrupted
	at java.lang.Thread.sleep(Native Method)
	at org.apache.spark.rpc.RpcEndpointRef.askWithRetry(RpcEndpointRef.scala:114)
	at org.apache.spark.rpc.RpcEndpointRef.askWithRetry(RpcEndpointRef.scala:77)
	at org.apache.spark.scheduler.cluster.YarnSchedulerBackend$YarnSchedulerEndpoint$$anonfun$org$apache$spark$scheduler$cluster$YarnSchedulerBackend$$handleExecutorDisconnectedFromDriver$2.applyOrElse(YarnSchedulerBackend.scala:156)
	at org.apache.spark.scheduler.cluster.YarnSchedulerBackend$YarnSchedulerEndpoint$$anonfun$org$apache$spark$scheduler$cluster$YarnSchedulerBackend$$handleExecutorDisconnectedFromDriver$2.applyOrElse(YarnSchedulerBackend.scala:151)
	at scala.concurrent.Future$$anonfun$onFailure$1.apply(Future.scala:136)
	at scala.concurrent.Future$$anonfun$onFailure$1.apply(Future.scala:134)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:32)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	... 2 more
